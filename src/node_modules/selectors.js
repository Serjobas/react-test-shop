import { sum, uniq, assoc, equals, always, when, path, map, prop, length, compose, pluck, filter, contains, values } from 'ramda'
import { equal } from 'assert';

export const getPhoneById = (state, id) => prop(id, state.phones);

export const getPhones = (state, ownProps) => {
  const activeCategoryName = getActiveCategoryName(ownProps)

  console.log('activeCategoryName', activeCategoryName)

  const applySearch = item => contains(
    state.phonesPage.searchStr,
    prop('name',item)
  ) 

  const applyCategory = item => {
    let activeCategoryId = getCategories(state).find(category => category.name.toLowerCase() === activeCategoryName.toLowerCase() );
    activeCategoryId = activeCategoryId ? activeCategoryId.id : null

    return equals(
    activeCategoryId,
    prop('categoryId', item)
  )
  }

  const phones = compose(
    filter(applySearch),
    when( always(activeCategoryName), filter(applyCategory)),
    map(id => getPhoneById(state, id))
  )(state.phonesPage.ids);
  
   return phones;
}

export const getRenderedPhonesLength = state => length(state.phonesPage.ids);

export const getTotalBasketCount = state => length(state.basket);

export const getTotalBasketPrice = state => {
  const totalPrice = compose(
    sum,
    pluck('price'),
    map(id => getPhoneById(state, id))
  )(state.basket);

  return totalPrice;
}

export const getCategories = state => values(state.categories);

export const getActiveCategoryName = ownProps => path(['match', 'params', 'id'], ownProps);

export const getBasketPhonesWithCount = state => {
  const uniqueIds = uniq(state.basket);
  const phoneCount = id => compose(
    length,
    filter(basketId => equals(id, basketId))
  )(state.basket);
  const phoneWithCount = phone => assoc('count', phoneCount(phone.id), phone);
  const phones = compose(
    map(phoneWithCount),
    map(id => getPhoneById(state, id))
  )(uniqueIds)
  return phones;
}